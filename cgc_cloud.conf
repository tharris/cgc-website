######################################################
#
#  WormBase Default Configuration
#
#  This file contains defaults for the WormBase
#  application.  This file should not be edited.
#
#     Configuration file precedence (lowest to highest)
#
#     $approot/wormbase.conf               // this file
#
#  You can over-ride the default settings in this file in:
#     $approot/wormbase_local.conf         // local defaults
#
#  Finally, you can provide your own local config file at
#     $approot/wormbase_[whatever].conf
#     shell> export WormBase_LOCAL_CONFIG_SUFFIX=[whatever]
#
#  For production servers, we dynamically select a configuration file
#  using this trick.
#     $approot/wormbase_[hostname].conf    // local defaults (for deployment)
#     $approot/wormbase_[developer].conf   // developer defaults
#
######################################################

# Are we a (development|mirror|local|production) site?
installation_type   = production

# For providing Google maps on strain pages
google_api_key = ABQIAAAAX6AZGEUlM28m4mzs0PsGkhRVfLFVmRFz44kSxZwC_XT2TLrxixTVyjZlGBxla25vFXfsh17xrvYj0g


# enable_ssl = 1; 
#       secure_uri_for will return the uri with the scheme https
# enable_ssl = 0; 
#       secure_uri_for will return the results of uri_for
enable_ssl = 1


######################################################
#
#   Debugging 
#
######################################################

# debug: enable system-wide debugging; expects boolean
debug = 0
# debug_view: style of the view debugging. Off by default
#    unless "debug" is set above and debug_view set to 
#    one of
#     comment - send debugging statements as HTML comments
#     browser - send debugging statements in formatted divs
#     log     - send to the error log file
debug_view =

# Enable fatal data stucture compliance. Rendering of
# widgets will fail if the installation_type is 'development'
# and if this is set to a true value.
fatal_non_compliance = 0

timer = 0


########################################################
#
#  EMAILS
#
########################################################

# Issue tracking and reporting
issue_email = help@wormbase.org

# Registering a new account
register_email = staff@wormbase.org

# wormbase_user exists only on wb-web6 (206.108.125.165)
<Model::Schema>
  schema_class = WormBase::Schema
  <connect_info>  
        dsn =  dbi:mysql:wormbase_user:hostname=localhost
        user = wormbase
        password =
   </connect_info>
</Model::Schema>

########################################################
#
#  Database Locations and Authorization
#
#  By default, we use remote data sources for
#  convenience but expect this to be overriden
#  by the wormbase_local.conf.
#
########################################################

<Model::WormBaseAPI>
  class = WormBase::API
  <args>
    <pre_compile>
      base =  /usr/local/wormbase/databases/
      gene = /gene/
      position_matrix = /position_matrix/
      
      rnai_details_file =  rnai_data.txt
      gene_rnai_phene_file =  gene_rnai_pheno.txt
      gene_variation_phene_file =  variation_data.txt 
      phenotype_name_file =  phenotype_id2name.txt 
      gene_xgene_phene_file =  gene_xgene_pheno.txt 
      pm_id2consensus_seq_file = pm_id2consensus_seq.txt
      pm_id2source_pm_file = pm_id2source_pm.txt
      
      image_base         = /usr/local/wormbase/website-shared-files/html/img
#     image_base_classic = /usr/local/wormbase/website-shared-files/html/images-website-classic
      gene_expr          = $image_base/virtualworm/Gene_Expr_Renders
      expr_object        = $image_base/virtualworm/Expr_Object_Renders
      picture            = $image_base/picture_object
      
    </pre_compile>

    conf_dir    = __path_to(conf)__/
    
    # Temporary directory in filesystem space    
    # tmp_base    = __path_to(root)__/tmp/
    # tmp_base      = /tmp/wormbase/
    # In production, this is an nfs mount
    tmp_base      = /usr/local/wormbase/shared/tmp/
 
    #different tools WB provides
    <tool> 
    <blast_blat>
        base =  /usr/local/wormbase/databases/
        blast = /blast/
        SCORE_KEY_IMAGE = score_key.png
        HSP_GENOME_LINK_PART_LIMIT = 10
        HSP_ALIGNMENT_IMAGE_LIMIT  = 10
        BLAST_EXEC_DIR = /usr/local/wormbase/services/blast
        BLAT_CLIENT = /usr/local/wormbase/services/blat/bin/gfClient
        b_genome = c_elegans  c_briggsae c_brenneri c_japonica c_remanei b_malayi m_hapla m_incognita p_pacificus h_contortus
        b_protein = c_elegans  c_briggsae c_brenneri c_japonica c_remanei b_malayi p_pacificus  
        b_gene = c_elegans c_briggsae
        b_est = c_elegans  
        ARCHIVES = WS100 WS110 WS120 WS130 WS140 WS150 WS160 WS170 WS180 WS190
    </blast_blat>
       protein_aligner
        nucleotide_aligner
        tree
    <print>
      PRO_EXEC = ./CutyCapt
    </print>
    </tool>
    <database>
        # tmp directory for sockets and lock files.
    # This *must* be distinct from above since
    # to prevent collisions of lock files in production.
    tmp = /tmp/wormbase/    
    <acedb>
        # Acedb configuration
        delay = 600
        reconnect = 5
        host = localhost
        port = 2005
        user =
        pass =
        cache_root = __path_to(root)__/cache/
        cache_expires = 3 weeks
        cache_size    = 100000000
        cache_auto_purge_interval =
    </acedb>

    <mysql>
      delay = 600
      reconnect = 3
      host  = localhost
      user  = wormbase
      pass  = 
      <data_sources>
          clustal  = 1
      </data_sources>
    </mysql>

    <gff>
      # MySQL configuration
      delay = 600
      reconnect = 3
#      host  = 206.108.125.165
      host  = localhost
      user  = wormbase
      pass  = 
        <data_sources>
        <c_elegans>
            adaptor = dbi::mysqlace
            aggregator = processed_transcript{coding_exon,5_UTR,3_UTR/CDS}
            aggregator = full_transcript{coding_exon,five_prime_UTR,three_prime_UTR/Transcript}
            aggregator = transposon{coding_exon,five_prime_UTR,three_prime_UTR}
            aggregator = clone
            aggregator = alignment
            aggregator = waba_alignment
            aggregator = coding{coding_exon}
            aggregator = pseudo{exon:Pseudogene/Pseudogene}
            aggregator = rna{exon/Transcript}
            aggregator = wormbase_cds{coding_exon,three_prime_UTR,five_prime_UTR}
            aggregator = motif_span{motif_segment/Motif}
        </c_elegans>
        <c_briggsae>
            adaptor    = dbi::mysqlace
            aggregator = wormbase_cds{coding_exon,three_prime_UTR,five_primer_UTR/CDS}
            aggregator = clone
            aggregator = alignment
            aggregator = waba_alignment
        </c_briggsae>
        <c_brenneri>
            adaptor    = dbi::mysqlace
            aggregator = wormbase_gene
        </c_brenneri>
        <c_remanei>
            adaptor    = dbi::mysqlace
            aggregator = wormbase_gene
        </c_remanei>
        <p_pacificus>
        </p_pacificus>
        <c_elegans_pmap>
            adaptor    = dbi::mysqlace
            aggregator = wormbase_gene
        </c_elegans_pmap>
        <c_elegans_gmap>
            adaptor    = dbi::mysqlace
            aggregator = wormbase_gene
        </c_elegans_gmap>
        </data_sources>
    </gff>
      </database>
  </args>
</Model::WormBaseAPI>


  
<stacktrace>
    enable      1
</stacktrace>

<Plugin::ErrorCatcher>
    enable      1
</Plugin::ErrorCatcher>

<Plugin::ErrorCatcher::Email>
    to      oicr@wormbase.org   
    from    oicr@wormbase.org 
    use_tags 1
  #  subject Error Report from: %h; %F, line %l
</Plugin::ErrorCatcher::Email>



