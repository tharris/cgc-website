<h2>Role-based Authorization</h2>

The role-based authorization built into the app lets us easily
provide different views based on the status of the user. Here's
how it works.

<h3>Available Roles</h3>

<ul>
<li><strong>admin</strong></li>
<p>App developers. Have full privileges plus dashboard panels for debugging and performance tuning.</p>

<li><strong>manager</strong></li>
<p>A senior user, such as a principal investigator. Managers have access to reporting and statistics.</p>

<li><strong>employee</strong></li>
<p>A semi-privileged member of the business or lab. Employees can enter and edit data.</p>

<li><strong>user</strong></li>
<p>End users. Can create an account for themself and place order.<p>

</ul>

<h3>Where are roles defined?</h3>

<strong>schema/cgc.sql</strong>


<h3>How are the ancestral admin users specified?</h3>

<ul>
<li>During database creation in schema/cgc.sql</li>
<li>Dynamically based on specific email addresses in App::Web::Controller::Auth.</li>
</ul>


<h3>How do I make use of roles in templates to conditionally display content?</h3>

<code>
    &#91;% IF c.check_user_role('admin') %&#93;
         You're awesome, admin! Have an awesome day, m'kay?
    &#91;% END %&#93;
</code>


<h3>What else?</h3>

<p>Checkout Catalyst::Plugin::Authorization::Role for additional cool stuff. 
For example, we may want to restrict access to specific actions by role.
</p>

   
