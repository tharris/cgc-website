[%# Core template elements %]


[% BLOCK modal %]
<div class="modal-header">
      <button type="button" class="close" data-dismiss="modal">&times;</button>
      <h3>[% title %]</h3>
      [% content %]
</div>
[% END %]

[% BLOCK modal_body %]
<div class="modal-body">
   [% content %]
</div>
</div>
[% END %]

[% BLOCK  modal_footer %]
<div class="modal-footer">
    [% content %]
</div>
[% END %]


[%# Link to a species %]
[% MACRO species_link(species) BLOCK %]
   <em><a href="/[% species %]">[% species %]</a></em>
[% END; %]



[%# Typeahead support, required on all index pages %]
[% MACRO typeahead_support(class,columns) BLOCK %]

<script>
    $(function () {
        $('#search-[% class %]').typeahead({
            ajax: {
            	uris: [
		[% FOREACH col IN columns %]
            		'/rest/list/[% class %]?distinct;columns=[% col %]',
	        [% END %]
            	],
				preprocess: function (item) {
					return item[0];
				}
            },
        });
        
        $('#search-[% class %]').on('change',
            function (data) {
                window.location.href = '/[% class %]/' + data.target.value
                // If we want to get fancy and avoid page loads....
                // window.location.hash = data.target.value;
            }
        );

        /*
        $(window).hashchange(function () {
            // var laboratoryName = location.hash.replace(/^#/,'');
            $.ajax({
                url: '/[% class %]/' + [% class %]Name,
                dataType: 'json',
                success: function (json) {
                    console.log(json);
                    var tableRow = function (key) {
                        var row = $('<tr></tr>');
                        row.append($('<th></th>').html(key))
                            .append($('<td></td>').html(json[key]));
                        return row;
                    };
                    $('#[% class %]-view').empty();
                    $('#[% class %]-view').add(tableRow("name"));
                }
            });
        });
        */
    });
</script>
[% END %]




[% BLOCK admin_content %]
     <div class="alert alert-info"><h3>[% title %]</h3>
          <p><span class="label label-important">Important</span> This content is only visible to administrators!</p>
          <p>[% content %]</p>
     </div>
[% END %]









[% # EVERYTHIGN BELOW HERE IS CRUFT %]


[%#

    Build a JQuery dataTable.
    Parameters:
        order  : array of columns
        columns: hash ref associating columns to labels
        key    : data key for accessing the stash        
        passed_data : in lieu of passing a key for accessing data,
                      pass in pre-structured data as passed_data;
                      useful in cases when you want to change the processing heuristic.

   Note: build_data_table is no longer wrapped in a field BLOCK. This was too
   restrictive for formatting, for example, in cases where it was
   necessary to include multiple tables in a single field.
%]

[% MACRO build_data_table BLOCK;

      local_data = passed_data ? passed_data : fields.$key.data;

      headers = [];
      FOREACH o IN order; headers.push(columns.$o); END;

      # generate table
      jquery_data_table_html(headers, local_data, "table_${key}_by" _ colorbox, style, table_build, order);   

    END; # END of MACRO
%]

[%# jquery_data_table_html:
     
     It might be better to build the table directly from the data
     structure instead of formatting it into a html table and then
     styling via javascript.
%]
     
[% MACRO jquery_data_table_html(table_headers, rows,table_name,style,table_build, columns) BLOCK %]
  [% IF rows && rows.size > 0;
      # Set up some suitable defaults
       IF rows.size < 11 || (rows.size < 31 && table_headers.size < 3);
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
          filter          = 'false';
          info            = 'false';
       ELSIF rows.size < 31;
          paginate        = 'false';
          pagination_type = 'false';
      	  length          = 'false';
      	  lengthMenu      = 'false';
      	  filter          = 'true';
          info            = 'false';
       ELSE;
          paginate        = 'true';
          pagination_type = 'full_numbers';
      	  length          = 'true';
          lengthMenu      = '[[50, 100, 150, -1], [50, 100, 200, "All"]]';
          filter          = 'true';
      	  info            = 'true'; 
      END;

     UNLESS table_build;

   %]

    <table id="[% table_name %]" class="table table-striped">
    <thead>
        <tr>
            [% FOREACH header IN table_headers %]  
            <th>[% header %]</th>
            [% END %]
        </tr>
    </thead>
    <tbody>
        [%
          FOREACH row IN rows;
            '<tr>';
		FOREACH col IN columns;
		   '<td>';
                     row.$col;		   		    
		  '</td>';
	        END;
            '</tr>';
          END;
             %]
    </tbody>
  </table>
    [% END %]
<!--
    <script type="text/javascript" >
        WB.getPlugin("dataTables", function(){
          $jq('#[% table_name %]').dataTable({
            "bPaginate"        : [% paginate %],
            "bLengthChange"    : [% length   %],
            "sPaginationType"  : "[% pagination_type %]",
            "bFilter"          : [% filter %],
            "bInfo"            : [% info %],
            [% style %]
          });
        });
    </script>
-->
   [% END %]

[% END %]



[% MACRO link_to_wormbase(class,target,text) BLOCK;
    '<a target="_blank" href="http://www.wormbase.org/get?name=' _ target _ ';class=' _ class _ '">'  _ text _ '</a>';

END;
%]








[% BLOCK status_bar %]
<div style="float:right;padding:1em;"> | 
<button id="my-cart"></button> <a href="/bench">([% c.user_session.bench.register.size %])</a>
</div>
[% END %]

[% BLOCK links_block %]
  [% FOREACH link IN external_links.data.keys %]
    [% IF link == 'aceview' %]
      <li>[% external_link(link,'AceView', external_links.data.$link) %]</li>
    [% ELSIF link == 'ncbi_refseq'%]
      [% FOREACH ref_link IN external_links.data.$link %]
      <li>[% external_link(link, "NCBI<span id=\"fade\"> - " _ ref_link _ "</span>", ref_link) %]</li>
      [% END %]
    [% END %]
  [% END %]
[% END %]








[% BLOCK widget_sortable_block %]
 
   <!-- start [% id %] widget -->
          <div id="widget-[% type %]" class="widget-container ui-corner-all">
                <header> 
                <div class="ui-corner-top widget-header">
                    <div class="module-close" wname="[% id %]" title="close"></div>
[% IF 0 %]                     <div class="module-max" wname="[% id %]" title="pop out"></div>
[% END %]              
                    <h3><div class="module-min" wname="[% id %]"></div><span class="widget-title">[% title %]</span>
        [% IF (type == 'me') %]<span wname="[% id %]" class="reload ui-icon ui-icon-arrowrefresh-1-s" title="reload"></span>[% END %]
                        <span class="ui-icon ui-icon-arrow-4 hide" title="move"></span>
                    </h3>
                </div>
                </header>

                <div id="[%- id -%]-content" class="content">
                [% content %]
                </div>
         
                <div id="widget-footer">
[%# UNLESS c.req.action == '/' %]
[% UNLESS type.match('(tool)|(me)') %]
                    <a  tip="download" onClick='$jq(this).toggleClass("ui-state-highlight");' class="button tip-simple tr feed ui-corner-all"  rel="[% c.uri_for('/rest','feed','download',class,this_object_id,w.id,this_object_label) %]"><span class="ui-icon ui-icon-arrowthickstop-1-s ui-button"></span></a>
[% END %] 
[% IF id.match('(static-widget)') && (id != 'static-widget--1')  %]
    [% IF c.check_any_user_role("admin", "curator") %]
                    <a  tip="edit" id="edit-button"  onClick='WB.StaticWidgets.edit("[% id %]");' class="button tip-simple tr ui-corner-all"><span class="ui-icon ui-icon-pencil ui-button"></span></a>
    [% END %]
                    <a  tip="view history" id="history-button" onClick='WB.StaticWidgets.history("[% id %]");' class="button tip-simple tr ui-corner-all"><span class="ui-icon ui-icon-clock ui-button"></span></a>
[% END %]
                    

                </div>
        <div id="widget-feed"></div>  

      </div> 
   <!-- end [% id %] widget -->

[% END %]


[%#
 #####################################################
 #
 #  Server Details: the server that generated the 
 #  block of code. Mostly useful for debugging. 
 #  
 ####################################################
%]
[% MACRO server_details(title) PERL %]
      my $host = `hostname`;
      chomp $host;
#     print "\n\n<!-- [% title %] generated by: $host -->\n\n\n\n\n";
      print "Generated by: $host";
[% END %]





[%#
####################################################
#
#  GA
#
####################################################
%]
[% BLOCK google_analytics %]
   <!-- GA -->
   <!-- TODO: replace with our tracker -->
[% END %]











[% MACRO genetic_position BLOCK ;
     WRAPPER $field_block title="Genetic position";
          IF fields.genetic_position.data.chromosome;
            fields.genetic_position.data.formatted _ ' (' _ fields.genetic_position.data.method _ ')';

#     fields.genetic_position.data.chromosome _ ': ' _ fields.genetic_position.data.position;
#       IF fields.genetic_position.data.error;
#          "+/-";
#          fields.genetic_position.data.error;
#       END;
#    if ($position == 0) {
#            $label = $link_group . sprintf(":%2.2f +/- %2.3f cM %s","0",$error) ;
#        } else {
#            $label = $link_group . ($position ? sprintf(":%2.2f +/- %2.3f cM %s",$position,$error): '');


      ELSE;       
         '<div class="caveat-emptor">This gene has not been placed on the genetic map or its coordinates are unknown.</div>';
      END;

    END;
END;
%]





[% MACRO remarks BLOCK;
   # Expects the remarks key to be defined in the data stash
   # Presents field in a toggle by default; pass "no_toggle=1" to conceal.
   IF no_toggle == 1;  
      '<div class="text-width">';
       WRAPPER $field_block title="Remarks" key="remarks";
          markup(fields.remarks.data.join('<br>'),0);
       END;
      '</div>';
   ELSE;
      WRAPPER $field_block title="" key="remarks";
         '<div class="toggle">Curatorial remarks</div>';
         '<div class="returned">';
              markup(fields.remarks.data.join('<br />'),0);
         '</div>';
      END;
   END;
END;
%]

[% MACRO summary BLOCK;
    # Currently only includes Summary but could encompass other tags
    WRAPPER $field_block title="Summary" key="summary";
            IF fields.summary.data.defined; fields.summary.data; END;
    END;
END;
%]

[% MACRO status BLOCK; 
      WRAPPER $field_block title="Status" key="status";
           IF fields.status.data.defined; fields.status.data; END;
      END;
END;
%]

[% MACRO taxonomy BLOCK; 
   # Don't display unless we have a genus and species
   IF fields.taxonomy.data.genus;
      WRAPPER $field_block title="Species" key="taxonomy";
          '<span class="species">';
          fields.taxonomy.data.genus _ ' ' _ fields.taxonomy.data.species;
          '</span>';
      END;
   END;
END;
%]



[% MACRO xrefs BLOCK;

 USE Dumper;
 '<pre>';
 Dumper.dump(fields.xrefs.data);
 '</pre>';

  hash = fields.xrefs.data;
  FOREACH db IN hash.keys.sort;
       db;
       hash.$db.url;
  END;
END;
%]








[%# 
    #######################################################

      Class-specific MACROS, used only by a single class 

    #######################################################
%]

[% # gene_list_by_species: custom dataTable processing for the Gene Class summary %]

[% MACRO gene_list_by_species BLOCK;

   WRAPPER $field_block title="$title";

       # loop through each element in <subroutine>.<return_data_key>.<... to array data> array
       # One table for each species
       # Force C. elegans to the top of the list
       species_list = fields.$key.data.keys.sort;
       species_list.unshift('Caenorhabditis elegans');
       species_list = species_list.unique;

       FOREACH species IN species_list;
            IF fields.$key.data.$species > 0;
                WRAPPER $field_block title="" key="$key";

                   # declare array of columns named via keys in the data structure
               IF key == 'current_genes';
                    order = ['species','locus', 'sequence'];
            
                 # declare hash for column headers, keyed as above
                     headers = {   species  => 'Species',
                                       locus    => 'Locus',
                                       sequence => 'Sequence' };
                  ELSE;
                     order = ['species','former_name', 'new_name','sequence'];
               
                 # declare hash for column headers, keyed as above
                     headers = {   species     => 'Species',
                                       former_name => 'Former name',
                       new_name    => 'New name',
                                       sequence    => 'Sequence' };   
                  END;

                 # declare rows array
                 rows = [];
  
                 FOREACH r IN fields.$key.data.$species;
                       row = [];
                   # loop through each element in order array (for columns) , declared above
                   FOREACH o IN order;          
                     # get value (val) from the row r
                             val = r.$o;
                     # enter data in row
                             row.push(val);
                       END;
                   # enter data row array into rows
                           rows.push(row);
                 END;
                      
                 # populate name array;
             names = [];
             FOREACH o IN order; names.push(headers.$o); END;
                 table_count = table_count + 1;               

                  # generate table
                 '<div class="toggle">';
                         '<span class="species">' 
                          _ species 
                          _ '</span> (' 
                          _ fields.$key.data.$species.size 
                          _ ' members)'
                          _ '</div>';
                 '<div class="returned">';
#                    dataTable_list(names, rows, "table_${species}_${key}");
                    jquery_data_table_html(names, rows, "table_${species}_${key}_${table_count}");
                '</div>';         
         END; # END of nested WRAPPER
           END; # END IF species contains data
         END; # END of SPECIES
     END; # END of primary WRAPPER 
  END; # END of MACRO
%]




[%# 

   gene_ontology; custom data table processing used on the Gene Summary.

   This is essentially generic processing for a nested data structure
   intended to be multiple tables.
   
   eg. data contains a hash.array.hashrefs (instead of single tier array.hashrefs)

%]

[% MACRO gene_ontology BLOCK;

       # One table for each key (here, a GO facet)
       facets = fields.$key.data.keys.sort;

       FOREACH facet IN facets;
            IF fields.$key.data.$facet > 0;
                WRAPPER $field_block title="$facet" key="$key";
                                  
                   table_count = table_count + 1;                 
 
                  # generate table
#                            '<span class="species">'
#                          _ facet 
#                          _ '</span> (' 
#                          _ fields.$key.data.$facet.size 
#                          _ ' assocations)';

                  # Here we assume that the inner data structure as an array of hashes  
                  build_data_table(order = ['method','term', 'evidence_code'],
                             columns = {   method   => 'Method',
                                                 term   => 'Term',
                                        evidence_code   => 'Evidence' },
                             passed_data = fields.$key.data.$facet,
                         key     = "table_${table_count}_go");   

                 END; # END of WRAPPER
              END; # END IF facet contains data    
         END; # END of facets
  END; # END of MACRO
%]

[% MACRO add_static_widgets BLOCK %]

  [% FOREACH widget IN static_widgets %]
    [% widget_name = widget.widget_title %]
    [% w = { id = 'static-widget-' _ widget.widget_id
            title = widget.widget_title
            href =  c.uri_for('/rest','widget','static',widget.widget_id)
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]
    [% IF widget.widget_order > 0 %]
      [% widget_order = widget.widget_order %]

      [% # I assign to ws just so that the result doesn't print %]
      [% ws = widgets.splice(widget_order, 0, [w]) %]
    [% ELSE %]
      [% widgets.push(w) %]
    [% END %]
  [% END %]
  [% IF c.check_user_roles('admin') %]
    [% w = { id = 'static-widget-0'
            title = 'Add new widget...'
            href =  c.uri_for('/rest','widget','static','0') _ '?path=' _ c.req.uri.path  _ '&edit=1'
            type = section == 'species' ? class : (section ? section : 'static')
            };
    %]

      [% widgets.push(w) %]
  [% END %]
[% END %]


[% # Report Page elements; shared for species, resources, and tools %]
[% # Called from species/report.tt2 and resources.report.tt2        %]
[% # Callers should pass an array of widgets and the page title     %]

[% MACRO report_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  SET base = '/rest/widget';

  # Conditionally set up different types of pages.
  IF is_class_index && ((!class || class == 'all') || (species && species != 'all'));
    SET this_object_id    = class; 
    SET this_object_label = species; 
    base = base _ '/index';
    arg1 = species;
    IF species; 
      section_fetch = 'species_list'; 
      IF class == 'all';
        section_fetch = c.config.sections.species_list.$species;
      ELSE;
        section_fetch = c.config.sections.species_list.$species.$class;
      END;
    ELSE;
        section_fetch = c.config.sections.$section;
    END;
  ELSE;
    SET this_object_id    = object.name.data.id || 'all';
    SET this_object_label = object.name.data.label || 'all';
    arg1 = class;
    section_fetch = c.config.sections.$section.$class;
  END;

# Debug
#    'section     : ' _ section      _ "<br />";
#    'class       : ' _ class   _ "<br />";
#    'species     : ' _ species   _ "<br />";

  # Get the default (configuration provided) list of widgets.
  widget_list = section_fetch.widgets.keys.sort;
  ov_list = widget_list.grep('^overview$');
  FOREACH ov_list;
    widget_list.unshift('overview');
  END;
  IF ov_list.size > 0; overview = 1; END;
  widget_list = widget_list.unique;

  FOREACH widget_name IN widget_list;
    IF widget_name;
    # Fetch the actual widget configuration.
    widget = section_fetch.widgets.$widget_name;

    # What context should this widget be displayed in, and what type of page are we?
    IF is_class_index;
        NEXT IF widget.display == "report";
    ELSE;
        NEXT IF widget.display == "index";
    END;

    w = {  id    = widget_name
            title = widget.title
            href  = c.uri_for(base, arg1, this_object_id, widget_name)
            type  = section == 'species' ? class : section
          };

    widgets.push(w);
    END;
  END;

  # is_static refers to pages that don't handle objects (/resources/reagents)
  IF is_class_index && !is_static;
    index_widgets = ['browse', 'basic_search'];
    IF((species == 'all')||(class == 'all'));
      index_widgets.push('summary');
    END;

    FOREACH widget_name IN index_widgets;
      t = widget_name FILTER ucfirst;
      widgets.push({ id = widget_name
                title = t.replace('_', ' ')
                href  = c.uri_for('/rest','widget', 'index', species, class, widget_name),
                type = section == 'species' ? class : section
            });
    END;
  END;

  add_static_widgets;

  # Add tools.
  tool_list = section_fetch.tools.keys.sort || [];

  # object pages automatically get the tree display
  IF object; tool_list.unshift('tree'); END;

  widgets.push({ title="Tools" type="title"}); 
  FOREACH widget_name IN tool_list;
      widget = c.config.sections.tools.$widget_name;
      # What context should this widget be displayed in ?
      IF is_index;
         NEXT IF widget.display == "report";
      ELSE;
         NEXT IF widget.display == "index";
      END;
      
      w = { id = widget_name
             title = widget.title
             href =  c.uri_for('/rest','widget',class,this_object_id,widget.name)
             type = 'tools'
            };
    
      widgets.push(w);
   END;


  FOREACH widget_name IN ['comment', 'issue'];
      t = widget_name FILTER ucfirst;
      w = { id = widget_name
            title = t _ 's ' _ '<a class="' _ widget_name _ '-count"></a>'
            href =  c.uri_for('/rest','feed',widget_name,class,this_object_id,'',this_object_label) _ '?url=' _ c.req.uri.path
            type = 'tools'
          };
      widgets.push(w);
  END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]






[%# This is an expedient replication of report_page to support the userguide. 
    Instead of specifying in config a list of widgets, we just pass them in %]

[% MACRO userguide_page BLOCK;
  widgets = [];
  widgets.push({ title="Page Content" type="title"});

  SET base = '/rest/widget/userguide';

  # The userguide has a two-tiered hierarchy. eg: /userguide/developer/api
  # to make it easier to organize templates on the filesystem.
  # We need to add a param for the top level category.
  IF category == 'index'; subcategory = 'any'; END;

  FOREACH widget IN widget_list;    
     hash = widget.keys;
     name = hash.0;
     wtitle = widget.$name;
      w = {  id     = name
            title = wtitle,
            href  = c.uri_for(base, category, subcategory, name)
            type  = 'resources'
          };

    widgets.push(w);
  END;

  widgets.push({ title="Tools" type="title"}); 

  FOREACH widget_name IN ['comment', 'issue'];
      t = widget_name FILTER ucfirst;
      w = { id = widget_name
            title = t _ 's ' _ '<a class="' _ widget_name _ '-count"></a>'
            href =  c.uri_for('/rest','feed',widget_name,class,this_object_id,'',this_object_label) _ '?url=' _ c.req.uri.path
            type = 'tools'
          };
      widgets.push(w);
  END;

  PROCESS "shared/sidebar_structure.tt2" widgets=widgets overview=overview;
%]

[% END; %]






[%#
 #####################################################
 #
 #  Debugging
 #
 #    Simple view debugging. Should be passed the name 
 #    of the component since this is localized to the template
 #    (or block). That is, it doesn't work as expected when
 #    used via PROCESS or INCLUDE
 #  
 ####################################################
%]

[% BLOCK generic_debug_info %]
   <h5>General information:</h5>
   <pre>
   Catalyst action : [% c.controller.action_for(this) %]<br />
          template : [% template.name %]
   </pre>
[% END %]