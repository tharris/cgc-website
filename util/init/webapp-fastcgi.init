#!/bin/sh
# Start the WormBase Catalyst app under FastCGI
#
### BEGIN INIT INFO
# Provides: webapp
# Required-Start: $local_fs $network $named
# Required-Stop: $local_fs $network $named
# Should-Start: apache2
# Should-Stop: apache2
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: A Catalyst Application
### END INIT INFO

. /lib/lsb/init-functions

# Need sbin in our path
PATH=$PATH:/sbin
export PATH

APPNAME=WormBase
UNIXNAME=$(echo $APPNAME | perl -pe 's/::/_/;$_=lc')
APPDIR=/usr/local/wormbase/website
PROCS=10
# TCP socket
#SOCKET=127.0.0.1:3001
# Socket file
SOCKET=/tmp/wormbase.sock
# Leave these unset and we won't try to setuid/setgid.
#USER=myapp
#GROUP=myapp
USER=
GROUP=
# Set this if you have more than one instance of the app and you don't want
# them to step on each other's pidfile.
PIDSUFFIX=

# local::lib path, if you want to use it.
LOCALLIB=/usr/local/wormbase/website/extlib

if [ -f "/etc/default/"$UNIXNAME ]; then
. "/etc/default/"$UNIXNAME
fi

if [ -f "/etc/default/"$UNIXNAME ]; then
. "/etc/default/"$UNIXNAME
fi

if [ $(id -u) -eq 0 ] ; then
  PIDDIR=/var/run/$UNIXNAME
  mkdir $PIDDIR >/dev/null 2>&1
  chown $USER:$GROUP $PIDDIR
  chmod 775 $PIDDIR
else
  PIDDIR=/tmp
fi

PIDFILE=$PIDDIR/$UNIXNAME${PIDSUFFIX:+"-$PIDSUFFIX"}.pid

if [ -n "$LOCALLIB" ] ; then
    eval `perl -I"$LOCALLIB" -Mlocal::lib="$LOCALLIB"`
fi

check_running() {
    [ -s $PIDFILE ] && kill -0 $(cat $PIDFILE) >/dev/null 2>&1
}

check_compile() {
    if [ -n "$USER" ] ; then
	if su $USER -c "cd $APPDIR ; perl -Ilib -M$APPNAME -ce1" ; then
            return 0
	fi
	return 1
    else
	if ( cd $APPDIR ; perl -Ilib -M$APPNAME -ce1 ) ; then
	    return 0
	fi
	return 1
    fi
}

_start() {
    if [ -n "$USER" ] ; then  
	start-stop-daemon --start --quiet --pidfile $PIDFILE --chdir $APPDIR \
	    ${USER:+"--chuid"} $USER ${GROUP:+"--group"} $GROUP --background \
	    --startas $APPDIR/script/${UNIXNAME}_fastcgi.pl -- -n $PROCS -l $SOCKET -p $PIDFILE	
	for i in 1 2 3 4 5 6 7 8 9 10; do
	    sleep 1
	    if check_running ; then
		return 0
	    fi
	done
    else
	start-stop-daemon --start --quiet --pidfile $PIDFILE --chdir $APPDIR \
	    --background \
	    --startas $APPDIR/script/${UNIXNAME}_fastcgi.pl -- -n $PROCS -l $SOCKET -p $PIDFILE	
	
	for i in 1 2 3 4 5 6 7 8 9 10; do
	    sleep 1
	    if check_running ; then
		return 0
	    fi
	done
    fi
    return 1
}

start() {
    log_daemon_msg "Starting $APPNAME" $UNIXNAME
    if check_running; then
        log_progress_msg "already running"
        log_end_msg 0
        exit 0
    fi
    
    rm -f $PIDFILE 2>/dev/null
    
    _start
    log_end_msg $?
    return $?
}

_stop() {
    if [ -n "$USER" ] ; then  
	start-stop-daemon --stop --user $USER --quiet --oknodo --pidfile $PIDFILE --retry TERM/5/TERM/30/KILL/30 || log_failure_message "It won't die!"
    else       
	start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE --retry TERM/5/TERM/30/KILL/30 || log_failure_message "It won't die!"
    fi
}

stop() {
    log_daemon_msg "Stopping $APPNAME" $UNIXNAME
    
    _stop
    log_end_msg $?
    return $?
}

restart() {
    log_daemon_msg "Restarting $APPNAME" $UNIXNAME
    
    check_compile && _stop && _start
    log_end_msg $?
    return $?
}

# See how we were called.
case "$1" in
    start)
        start
	;;
    stop)
        stop
	;;
    restart|force-reload)
        restart
	;;
    check|check-compile)
        check_compile
	;;
    *)
        echo $"Usage: $0 {start|stop|restart|check}"
        exit 1
esac
exit $?
