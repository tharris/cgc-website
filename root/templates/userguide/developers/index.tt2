<div id="userguide">


<ol id="toc"></ol>

<div id="userguide-with-toc">
<h1>Developer's Guide To WormBase</h1>

<p>
We offer extensive resources for users wishing 
to extend and leverage the data and infrastructure
of WormBase.
</p>

<h2>Architecture</h2>
<p>
WormBase consists of an <a href="http://www.acedb.org/">AceDB data store</a>,
a series of MySQL databases storing genomic annotations, and flat files
for specialized applications on the website.
</p>

<h2>Understanding the data model</h2>

<p>
See <a href="http://wiki.wormbase.org/index.php/WormBase_Models">WormBase Models</a> on the <a href="http://wiki.wormbase.org/">WormBase Wiki</a> for details.
</p>

<h2>Programmatically accessing WormBase</h2>
<p></p>

<h3>RESTful Interface</h3>

<pre>
Objective  : Fast and easy interface to WormBase, all data uniquely addressable
Good for   : mashups, lightweight data mining
Skills     : command line, web development 
Advantages : Easy to learn
Drawbacks  : Downstream steps may still require programming
</pre>

<p>
Our extensive RESTful interface makes programmatically accessing
data easier than ever before.  Every piece of data in WormBase is permanently
addressable at a unique URI.  The granularity ranges from individual data 
elements (that we call fields), to small snippets (widgets),all the way
up to entire pages.  Each addressable element is available in a variety of
formats, including XML, HTML, JSON, YAML, and TXT.  Some elements can also
be returned as PDFs.
</p>

<p>In many ways, the RESTful interface is the easiest and most powerful
way to fetch data from WormBase. This is a great way to create mashups
of WormBase data for inclusion on your own website, too.

The following URI will generate the Gene overview widget for the specified gene:

<pre>
<a class="ajax overview" href="[% c.uri_for('/rest','widget','gene','WBGene00006763','overview') %]">/rest/widget/gene/WBGene00006763/overview</a>
  |     |      |        |           |
  |     |      |        |           widget or field
  |     |      |        object ID
  |     |      class
  |      type: field|widget|page
  the REST portal
</pre>

<p>
You can see all available classes, widgets, fields, and pages on the <a href="[% c.uri_for('/userguide','developers','api') %]">RESTful Interface Documentation</a> page.
</p>


<h3>AcePerl.pm</h3>

<pre>
Objective  : Perl interface for AceDB
Good for   : data mining core annotations of WormBase
Skills     : Perl object-oriented scripting
Advantages : Time-tested
Drawbacks  : Sequence features might need to be accessed by another API; need to know the data model.
</pre>

<p>
Directly access the AceDB database and query it using
the <a href="">AcePerl</a> API.  You'll need to know Perl and be familiar
with the underlying data model. AcePerl is the most tried and true
mechanism for programmatically accessing WormBase.
</p>

<h3>WormBase::API.pm</h3>

<pre>
Objective  : Perl interface for WormBase
Good for   : data mining all of WormBase
Skills     : Perl object-oriented scripting
Advantages : Abstracts data model;methods very biological
Drawbacks  : Doesn't span all database contents
</pre>


<p>
Use the Perl WormBase::API (the same API that powers the RESTful interface).
This API provides a higher level interface and an abstracts the data model. Because of this
the interface more closely reflects the underlying biology and not its organization
in the database. For example, to fetch the sequence of a protein.
<pre>
    my $sequence = $protein->sequence;
</pre>
The WormBase::API also wraps some functions of Bio::DB::GFF/SeqFeatureStore
to facilitate queries. To use WormBase::API, you'll need to know Perl 
but will NOT need to know anything about the underlying data model.
</p>

<p>
Checkout the code from our <a href="http://bitbucket.org/wormbase/tharris">Mercurial repository</a>.
</p>

<h3>Bio::DB::GFF / Bio::DB::SeqFeatureStore</h3>

<pre>
Objective  : Perl interfaces for MySQL sequence annotation databases
Good for   : data mining any annotation connected to the genome
Skills     : Perl object-oriented scripting
Advantages : Fast to develop and run
Drawbacks  : Doesn't cover non-sequence related annotations
</pre>

<h3>Straight up MySQL (NOT RECOMMENDED)</h3>

<pre>
Objective  : Access sequence annotation databases by direct MySQL query
Good for   : nothing
Skills     : writing SQL queries
Advantages : none
Drawbacks  : You need to reverse engineer the data schema. Why would you do that?
</pre>


<h2>Query Languages</h2>
<p></p>

<h3>Ace Query Language</h3>
<p>The Ace Query Language lets you write SQL-like queries directly against AceDB databases.  
    [<a href="[% c.uri_for('/userguide','developers','wormbase_query_langugages') _ '#aql' %]">Documentation and examples</a>]
</p>

<h3>WormBase Query Language</h3>
<p>The WormBase Query Language lets you write SQL-like queries directly against AceDB databases. It's syntax is closer to
    SQL and easier to learn than SQL.
    [<a href="[% c.uri_for('/userguide','developers','wormbase_query_langugages') _ '#wql' %]">Documentation and examples</a>]
</p>





</div>
</div>